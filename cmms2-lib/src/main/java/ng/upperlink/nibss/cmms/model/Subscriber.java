package ng.upperlink.nibss.cmms.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import ng.upperlink.nibss.cmms.embeddables.makerchecker.MakerChecker;
import ng.upperlink.nibss.cmms.enums.Constants;
import ng.upperlink.nibss.cmms.enums.MakerCheckerType;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.io.Serializable;


@Data
@Entity
@AllArgsConstructor
@NoArgsConstructor
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@Table(name = "Subscriber",schema = Constants.SCHEMA_NAME)
public class Subscriber extends SuperModel implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "Id")
    private Long id;

    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "UserId", unique = true, referencedColumnName = "Id")
    private User user;


    @NotNull
    @Column(unique = true, name = "Code")
    private String code;

    @Column(name = "BankCode")
    private String bankCode;

    @Column(name = "BankAccountNumber")
    private String bankAccountNumber;

    @Lob
    @Column(name = "AdditionalInfo1")
    private String additionalInfo1;

    @Lob
    @Column(name = "AdditionalInfo2")
    private String additionalInfo2;

    @Enumerated(EnumType.STRING)
    @Column(name = "MakerCheckerType")
    private MakerCheckerType makerCheckerType = MakerCheckerType.OPERATOR;

    @Embedded
    private MakerChecker makerChecker = new MakerChecker();


    @Column(name = "Activated")
    private boolean activated;

    @Column(name = "AutoGeneratedCode")
    private boolean autoGeneratedCode = true;

    @JsonIgnore
    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "CreatedBy", referencedColumnName = "Id")
    private User createdBy;

    @JsonIgnore
    @NotNull
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "UpdatedBy", referencedColumnName = "Id")
    private User updatedBy;

    public Subscriber(Long id, String unapprovedJson) {

        Gson gson = new GsonBuilder().setDateFormat("MMM dd, yyyy").create();
        Subscriber agentManager = unapprovedJson == null ? new Subscriber() : gson.fromJson(unapprovedJson, Subscriber.class);

        this.id = id;
        this.code = agentManager.getCode();
        this.user = agentManager.getUser();
        this.makerCheckerType = agentManager.getMakerCheckerType();
        this.makerChecker = agentManager.getMakerChecker();
        this.createdBy = agentManager.getCreatedBy();
        this.updatedBy = agentManager.getUpdatedBy();
        this.bankAccountNumber = agentManager.bankAccountNumber;
        this.bankCode = agentManager.bankCode;
        this.additionalInfo1 = agentManager.getAdditionalInfo1();
        this.additionalInfo2 = agentManager.getAdditionalInfo2();


    }

    public Subscriber(Long id, String code, String bankCode, String bankAccountNumber, String additionalInfo1, String additionalInfo2, MakerCheckerType makerCheckerType) {
        this.id = id;
        this.code = code;
        this.bankCode = bankCode;
        this.bankAccountNumber = bankAccountNumber;
        this.additionalInfo1 = additionalInfo1;
        this.additionalInfo2 = additionalInfo2;
        this.makerCheckerType = makerCheckerType;
    }

}
